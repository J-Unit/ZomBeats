//
//  InputController.h
//  ShipDemo
//
//  Created by Walker White on 1/18/15.
//
#define __TD_INPUT_CONTROLLER_H__

#include <stdio.h>
#include "cocos2d.h"

using namespace cocos2d;

/**
 * Class to represent player input.
 *
 * Cocos2D really, REALLY wants to handle input via callbacks.  Sometimes
 * (such as touch, keyboard) this is okay.  Other times (like the accelerometer)
 * it is very not okay. And many times it is a lot it easier to design a game
 * with a polling architecture than an event driven one.
 *
 * This class takes the input handlers in Cocos2D and hides them behind a
 * polling architecture.  It provides support for touch, accelerometer, and
 * keyboard simultaneously.  Use whichever one you want.  If an input mode
 * is not present, it is ignored.
 */
class InputController {
private:
    // EVENT LISTENERS
    /** Listener to process touch events */
    EventListenerTouchOneByOne* touchListener;
    /** Listener to process accelerometer events */
    EventListenerAcceleration*  accelListener;
    /** Listener to process keyboard events */
    //EventListenerKeyboard*      keybdListener;
	EventListenerMouse* mouseListener;
    
    /** Whether or not this controller is currently active. */
    bool active;
    
    // KEYBOARD SUPPORT (need a lot to retain state)
    /** Amount of thrust determined from keyboard (separate from inputThrust) */
    Vec2  keybdThrust;
    /** Number of keys currently down */
    int   keyCount;
    /** Whether the left arrow key is down */
    bool  keyLeft;
    /** Whether the right arrow key is down */
    bool  keyRight;
    /** Whether the up arrow key is down */
    bool  keyUp;
    /** Whether the down arrow key is down */
    bool  keyDown;

    /** Force generated by the left arrow key */
    float forceLeft;
    /** Force generated by the right arrow key */
    float forceRight;
    /** Force generated by the up arrow key */
    float forceUp;
    /** Force generated by the down arrow key */
    float forceDown;
    
    // TOUCH SUPPORT
    /** Location of the initial touch */
    Vec2  startTouch;


protected:
    /** The event dispatching handling input for this controller */
    EventDispatcher* dispatcher;
    


    
public:
	boolean clickProcessed;
	Vec2 lastClick;

    /**
     * Creates a new input controller for the given dispatcher.
     *
     * @param dispatcher Event handler for callbacks.
     */
    InputController(cocos2d::EventDispatcher* dispatcher);
    
    /**
     * Disposes of this input controller, releasing all listeners.
     */
    ~InputController();

    /** 
     * Start the input processing for this input controller.
     *
     * This will enable the dispatcher if it is not already enabled.
     */
    void    startInput();

    /**
     * Stop the input processing for this input controller.
     *
     * This will disable the dispatcher if it is not already disabled.
     */
    void    stopInput();
    
    /**
     * Processes the currently cached inputs.
     *
     * This method is used to to poll the current input state.  For input
     * without an associated event (like holding a key down) this method is
     * a necessity.
     */
    void    update();
    
    /**
     * Returns the current input thrust.
     *
     * The thrust is determined by the last input method.
     *
     * @return The input thrust
     */
   // const Vec2& getThrust() { return inputThrust; }
    
    // TOUCH CALLBACKS
    /**
     * Callback for the beginning of a touch event
     *
     * @param t     The touch information
     * @param event The associated event
     * 
     * @return True if the touch was processed; false otherwise.
     */
    bool    touchBeganCB(Touch* t, Event* event);

    /**
     * Callback for the beginning of a touch event
     *
     * @param t     The touch information
     * @param event The associated event
     */
    void    touchEndedCB(Touch* t, Event* event);
    
    // ACCELEROMETER CALLBACK
    /**
     * Callback for a change in accelerometer state
     *
     * @param acc   The accelerometer information
     * @param event The associated event
     */
    void    accleromCB(Acceleration *acc, Event *event);

    // KEYBOARD CALLBACK
    /**
     * Callback for a key press.
     *
     * @param keyCode   The key pressed
     * @param event     The associated event
     */
    //void    keyPressedCB(EventKeyboard::KeyCode keyCode, Event* event);
	void    mousePressedCB(Event *event);

    /**
     * Callback for a key release.
     *
     * @param keyCode   The key released
     * @param event     The associated event
     */
    //void    keyReleasedCB(EventKeyboard::KeyCode keyCode, Event* event);
	void    mouseReleasedCB(Event *event);
};

